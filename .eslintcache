[{"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\index.tsx":"1","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\reportWebVitals.ts":"2","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\store.ts":"3","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\App.tsx":"4","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\quiz\\quiz.reducers.ts":"5","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\pages\\Create.quiz.page.tsx":"6","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\pages\\Quizzes.list.page.tsx":"7","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\pages\\Manage.quiz.page.tsx":"8","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\pages\\Quiz.page.tsx":"9","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Header\\Header.tsx":"10","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\quiz\\utils.ts":"11","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\localstorage.ts":"12","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\quiz\\quiz.actions.types.ts":"13","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\quiz\\quiz.action.ts":"14","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Quizzes-list\\Quizzes.list.tsx":"15","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\According-list\\According.list.tsx":"16","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Create.main-quiz\\Create.main.quiz.tsx":"17","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Add-question-form\\Add.question.form.tsx":"18","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Card-container\\Card.container.tsx":"19","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Edit-form\\Edit.form.tsx":"20","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Quiz-final-results\\Quiz.final.results.tsx":"21","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Question-item\\Question.item.tsx":"22","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\utils\\first.chart.uppercase.ts":"23","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Error-message\\Error.message.tsx":"24","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Quiz-card-item\\Quiz.card.item.tsx":"25","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\According-item\\According.item.tsx":"26","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Answer-item\\Answer.item.tsx":"27","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Alert-window\\Alert.window.tsx":"28","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\toggler\\toggle.reducer.ts":"29","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\toggler\\toggler.actions.types.ts":"30","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\toggler\\toggler.actions.ts":"31","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Quiz-main\\Quiz.main.tsx":"32","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\With-input\\With.input.tsx":"33","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\utils\\confirm.alert.ts":"34","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Add-answer-form\\Add.answer.form.tsx":"35"},{"size":740,"mtime":1607457526647,"results":"36","hashOfConfig":"37"},{"size":425,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":1224,"mtime":1608075173723,"results":"39","hashOfConfig":"37"},{"size":2154,"mtime":1608209117276,"results":"40","hashOfConfig":"37"},{"size":3038,"mtime":1607897770894,"results":"41","hashOfConfig":"37"},{"size":258,"mtime":1607863452427,"results":"42","hashOfConfig":"37"},{"size":245,"mtime":1608070507509,"results":"43","hashOfConfig":"37"},{"size":3961,"mtime":1608136578750,"results":"44","hashOfConfig":"37"},{"size":2798,"mtime":1608132602717,"results":"45","hashOfConfig":"37"},{"size":1344,"mtime":1608054660867,"results":"46","hashOfConfig":"37"},{"size":5069,"mtime":1608067315406,"results":"47","hashOfConfig":"37"},{"size":296,"mtime":1607944027553,"results":"48","hashOfConfig":"37"},{"size":2429,"mtime":1607897991671,"results":"49","hashOfConfig":"37"},{"size":2298,"mtime":1607897969121,"results":"50","hashOfConfig":"37"},{"size":963,"mtime":1607862804248,"results":"51","hashOfConfig":"37"},{"size":6643,"mtime":1608078935489,"results":"52","hashOfConfig":"37"},{"size":4059,"mtime":1608127978953,"results":"53","hashOfConfig":"37"},{"size":3643,"mtime":1608075714294,"results":"54","hashOfConfig":"37"},{"size":395,"mtime":1607863350961,"results":"55","hashOfConfig":"37"},{"size":1536,"mtime":1607970895301,"results":"56","hashOfConfig":"37"},{"size":1374,"mtime":1608123010344,"results":"57","hashOfConfig":"37"},{"size":1912,"mtime":1608132631833,"results":"58","hashOfConfig":"37"},{"size":150,"mtime":1607789482977,"results":"59","hashOfConfig":"37"},{"size":433,"mtime":1607861582526,"results":"60","hashOfConfig":"37"},{"size":3540,"mtime":1608129185892,"results":"61","hashOfConfig":"37"},{"size":1359,"mtime":1607986046082,"results":"62","hashOfConfig":"37"},{"size":730,"mtime":1608074695244,"results":"63","hashOfConfig":"37"},{"size":668,"mtime":1607861392446,"results":"64","hashOfConfig":"37"},{"size":508,"mtime":1607968214135,"results":"65","hashOfConfig":"37"},{"size":188,"mtime":1607967407931,"results":"66","hashOfConfig":"37"},{"size":155,"mtime":1607967287037,"results":"67","hashOfConfig":"37"},{"size":638,"mtime":1608123912308,"results":"68","hashOfConfig":"37"},{"size":2340,"mtime":1608123829190,"results":"69","hashOfConfig":"37"},{"size":152,"mtime":1608075145865,"results":"70","hashOfConfig":"37"},{"size":1496,"mtime":1608078892433,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"1rzyt9t",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"74"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"74"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\index.tsx",[],["148","149"],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\reportWebVitals.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\store.ts",["150"],"import { createStore, applyMiddleware } from \"redux\";\r\nimport { combineReducers } from \"redux\";\r\nimport { quizReducer, quizResultsReducer } from \"./quiz/quiz.reducers\";\r\nimport { toggleReducer } from './toggler/toggle.reducer'\r\nimport logger from 'redux-logger'\r\n\r\nconst middleweres = [logger]\r\n\r\nconst rootReducer = combineReducers({\r\n    quizzes: quizReducer,\r\n    currentQuiz: quizResultsReducer,\r\n    // toggle: toggleReducer\r\n    // quizzesMain: quizzesReducer\r\n})\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middleweres))\r\n\r\n\r\n// const quiz = {\r\n//     title: 'a',\r\n//     description: 'this quiz about a',\r\n//     numberQuestions: 2,\r\n//     questions: {\r\n//         '249863': {\r\n//             question: 'what do u like eat',\r\n//             numberOfAnswers: 3,\r\n//             answers: ['banana', 'apple', 'watermelon']\r\n//         },\r\n//         '48263492863': {\r\n//             question: 'what do u drink eat',\r\n//             numberOfAnswers: 4,\r\n//             answers: ['cola', 'sprite', 'water', 'fanta']\r\n//         }\r\n//     }\r\n// }\r\n\r\n// console.log(Object.values(quiz.questions))\r\n// console.log(quiz.questions['249863'])","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\App.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\quiz\\quiz.reducers.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\pages\\Create.quiz.page.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\pages\\Quizzes.list.page.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\pages\\Manage.quiz.page.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\pages\\Quiz.page.tsx",["151","152"],"import React, { useEffect, useState } from 'react'\r\nimport { connect, useSelector } from 'react-redux'\r\nimport CardContainer from '../components/Card-container/Card.container'\r\nimport QuestionItem from '../components/Question-item/Question.item'\r\nimport QuizFinalResults from '../components/Quiz-final-results/Quiz.final.results'\r\nimport { QuizResults } from '../redux/quiz/model'\r\nimport { setCurrentQuizAction } from '../redux/quiz/quiz.action'\r\nimport { RootState } from '../redux/store'\r\nimport { QuizDescription, QuizTitle } from '../components/Quiz-main/Quiz.main'\r\n\r\n\r\nlet results: QuizResults\r\n\r\nfunction QuizPage({ currentQuiz, match }: any) {\r\n    const { quiz } = useSelector((state: RootState) => {\r\n        const { quizId } = match.params\r\n        results = state.currentQuiz\r\n        return state.quizzes[quizId]\r\n    })\r\n\r\n    const [isSubmit, setIsSubmit] = useState<boolean>(false)\r\n\r\n    useEffect(() => {\r\n        currentQuiz(match.params.quizId)\r\n    }, [match.params.quizId])\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <CardContainer>\r\n                <QuizTitle\r\n                    value={quiz.title}\r\n                    dateCreated={quiz.dateCreated}\r\n                />\r\n                <hr />\r\n                <QuizDescription value={quiz.description} />\r\n            </CardContainer>\r\n            { isSubmit ?\r\n                (<QuizFinalResults\r\n                    onBack={() => setIsSubmit(!isSubmit)}\r\n                    results={results}\r\n                />) : (\r\n                    <CardContainer>\r\n                        {quiz.questions.map((question, index) => {\r\n                            return <div key={question.questionId}>\r\n                                <QuestionItem question={question} />\r\n                            </div>\r\n                        })}\r\n                        <button\r\n                            className=\"btn btn-blue btn-sm\"\r\n                            onClick={() => {\r\n                                if (results.answers.length < quiz.questions.length) {\r\n                                    return alert('Quiz did not completed')\r\n                                }\r\n                                setIsSubmit(!isSubmit)\r\n                            }} >\r\n                            Submit\r\n                        </button>\r\n                        <p className=\"float-end mb-1\">\r\n                            <a href=\"#\" style={{ textDecoration: 'none' }}>Back to top</a>\r\n                        </p>\r\n                    </CardContainer>)}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nfunction mapDispatchToProps(dispatch: Function) {\r\n    return {\r\n        currentQuiz: (quizId: string) => dispatch(setCurrentQuizAction(quizId))\r\n    }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(QuizPage)","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Header\\Header.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\quiz\\utils.ts",["153"],"import { Quiz, QuizEditMain, QuizResults, Quizzes } from \"./model\"\r\nimport {\r\n    AddQuestionActionType,\r\n    AddQuizActionType,\r\n    AddAnswerActionType,\r\n    EditQuestionActionType,\r\n    EditQuizMainActionType,\r\n    RemoveQuestionActionType,\r\n    RemoveQuizActionType,\r\n    RemoveAnswerActionType,\r\n    SetCurrentQuizActionType,\r\n    SetAnswerActionType\r\n} from \"./quiz.actions.types\"\r\nimport { QuizzesState } from \"./quiz.reducers\"\r\n\r\nexport function findQuiz(quizzesObj: Quizzes, quizId: string): Quiz {\r\n    return quizzesObj[quizId].quiz\r\n}\r\n\r\nexport function removeQuestionUtil(currentState: QuizzesState, action: RemoveQuestionActionType) {\r\n    const { quizId, questionId } = action.payload\r\n    const quiz = findQuiz(currentState, quizId)\r\n\r\n    const filtredQuestions = quiz.questions.filter((question) => question.questionId !== questionId)\r\n\r\n    quiz.questions = filtredQuestions\r\n    quiz.numberQuestions -= 1\r\n\r\n    const newState = updateState(currentState, quizId, quiz)\r\n\r\n    return { ...newState }\r\n\r\n}\r\n\r\nexport function addQuestionUtil(currentState: QuizzesState, action: AddQuestionActionType) {\r\n    const { quizId, question } = action.payload\r\n    const quiz = findQuiz(currentState, quizId)\r\n\r\n    quiz.questions = [...quiz.questions, question]\r\n    quiz.numberQuestions += 1\r\n\r\n    const newState = updateState(currentState, quizId, quiz)\r\n\r\n    return { ...newState }\r\n}\r\n\r\nexport function removeAnswerUtil(currentState: QuizzesState, action: RemoveAnswerActionType) {\r\n    const { quizId, questionId, index } = action.payload\r\n    const quiz = findQuiz(currentState, quizId)\r\n\r\n    const questionIndex = quiz.questions.findIndex((question) => question.questionId === questionId)\r\n\r\n    const questionsLess = [...quiz.questions]\r\n\r\n    questionsLess[questionIndex].answers.splice(index, 1)\r\n\r\n    questionsLess[questionIndex].numberOfAnswers -= 1\r\n\r\n    quiz.questions = questionsLess\r\n\r\n    const newState = updateState(currentState, quizId, quiz)\r\n\r\n    return { ...newState }\r\n}\r\n\r\nexport function addAnswerUtil(currentState: QuizzesState, action: AddAnswerActionType) {\r\n    const { quizId, value, questionId } = action.payload\r\n    const quiz = findQuiz(currentState, quizId)\r\n\r\n    const questionIndex = quiz.questions.findIndex((question) => {\r\n        return question.questionId === questionId\r\n    })\r\n\r\n    const questionsNew = [...quiz.questions]\r\n\r\n    questionsNew[questionIndex].answers =\r\n        [...questionsNew[questionIndex].answers, value]\r\n\r\n    questionsNew[questionIndex].numberOfAnswers += 1\r\n\r\n    quiz.questions = questionsNew\r\n\r\n    const newState = updateState(currentState, quizId, quiz)\r\n\r\n    return { ...newState }\r\n}\r\n\r\nexport function editQuestionUtil(currentState: QuizzesState, action: EditQuestionActionType) {\r\n    const { quizId, value, questionId } = action.payload\r\n    const quiz = findQuiz(currentState, quizId)\r\n\r\n    const questionIndex = quiz.questions.findIndex((question) => {\r\n        return question.questionId === questionId\r\n    })\r\n\r\n    const questionsNew = [...quiz.questions]\r\n\r\n    questionsNew[questionIndex].question = value\r\n\r\n    quiz.questions = questionsNew\r\n\r\n    const newState = updateState(currentState, quizId, quiz)\r\n\r\n    return { ...newState }\r\n}\r\n\r\nexport function createQuizUtil(currentState: QuizzesState, action: AddQuizActionType) {\r\n    return {\r\n        ...currentState,\r\n        [action.payload.quizId]: {\r\n            quiz: action.payload\r\n        }\r\n    }\r\n}\r\n\r\nexport function removeQuizUtil(currentState: QuizzesState, action: RemoveQuizActionType) {\r\n    delete currentState[action.payload]\r\n    return {\r\n        ...currentState\r\n    }\r\n}\r\n\r\nexport function editQuizMainUtil(currentState: QuizzesState, action: EditQuizMainActionType) {\r\n    const { property, value, quizId } = action.payload\r\n\r\n    const quiz = findQuiz(currentState, quizId)\r\n\r\n    quiz[property] = value\r\n\r\n    const newState = updateState(currentState, quizId, quiz)\r\n\r\n    return { ...newState }\r\n}\r\n\r\nexport function updateState(\r\n    currentState: QuizzesState,\r\n    quizId: string,\r\n    newQuizSate: Quiz): QuizzesState {\r\n    return {\r\n        ...currentState,\r\n        [quizId]: {\r\n            quiz: newQuizSate\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// ******************************************************************************************************************\r\n// RESULTS UTILS\r\n\r\nexport function setCurrentQuizUtil(currentState: QuizResults, action: SetCurrentQuizActionType) {\r\n    return {\r\n        ...currentState,\r\n        quizId: action.payload,\r\n        answers: []\r\n    }\r\n}\r\n\r\nexport function setAnswerUtil(currentState: QuizResults, action: SetAnswerActionType) {\r\n    let newAnswersState = [...currentState.answers]\r\n    const index = currentState.answers.findIndex((answer) => answer.question === action.payload.question)\r\n\r\n    if (index !== -1) {\r\n        newAnswersState[index] = action.payload\r\n    } else {\r\n        newAnswersState = [...newAnswersState, action.payload]\r\n    }\r\n\r\n    return {\r\n        ...currentState,\r\n        answers: newAnswersState\r\n    }\r\n}\r\n","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\localstorage.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\quiz\\quiz.actions.types.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\quiz\\quiz.action.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Quizzes-list\\Quizzes.list.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\According-list\\According.list.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Create.main-quiz\\Create.main.quiz.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Add-question-form\\Add.question.form.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Card-container\\Card.container.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Edit-form\\Edit.form.tsx",[],["154","155"],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Quiz-final-results\\Quiz.final.results.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Question-item\\Question.item.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\utils\\first.chart.uppercase.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Error-message\\Error.message.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Quiz-card-item\\Quiz.card.item.tsx",["156"],"import React, { useEffect, useState } from 'react'\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from 'react-router-dom';\r\nimport { addQuestionAction, removeQuizAction } from '../../redux/quiz/quiz.action';\r\nimport { ReactComponent as EditIcon } from \"../../icons-svg/edit.svg\";\r\nimport { AddQuestion, Quiz } from '../../redux/quiz/model';\r\nimport ErrorMessage from '../Error-message/Error.message';\r\nimport { confirmAlert } from '../../utils/confirm.alert';\r\n\r\n\r\ninterface QuizCardItemProps {\r\n   quiz: Quiz\r\n   quizId: string\r\n   removeQuiz: (quizId: string) => void\r\n}\r\n\r\n\r\nfunction QuizCardItem({ removeQuiz, quizId, quiz }: QuizCardItemProps) {\r\n\r\n   const [isStatusOk, setIsStatusOk] = useState<boolean>(true)\r\n\r\n   useEffect(() => {\r\n      function checkStatus() {\r\n         if (quiz.numberQuestions === 0) {\r\n\r\n            return\r\n         }\r\n         quiz.questions.forEach((question) => {\r\n            setIsStatusOk(true)\r\n            if (question.numberOfAnswers <= 1) {\r\n               console.log(isStatusOk)\r\n               setIsStatusOk(false)\r\n            }\r\n         })\r\n      }\r\n      checkStatus()\r\n   }, [])\r\n\r\n   return (\r\n      <React.Fragment>\r\n         <div className=\"col\">\r\n            <div className={`card mb-4 shadow-sm`}>\r\n               <div className=\"card-header\">\r\n                  <Link\r\n                     to={`quiz/edit/${quizId}`}\r\n                     className=\"edit-quiz-btn edit-icon\">\r\n                     <EditIcon />\r\n                  </Link>\r\n                  <span\r\n                     className=\"delete-quiz-btn\"\r\n                     onClick={() => {\r\n                        if (confirmAlert('quiz')) {\r\n                           removeQuiz(quizId)\r\n                        }\r\n                     }}>\r\n                     X\r\n                  </span>\r\n                  <h4 >\r\n                     {quiz.title}\r\n                  </h4>\r\n               </div>\r\n               <div className=\"card-body\">\r\n                  <div>\r\n                     <small style={{ float: 'left', fontSize: '12px' }}>{quiz.dateCreated}</small>\r\n                  </div>\r\n                  <br />\r\n                  <div >\r\n                     <strong >Description:</strong>\r\n                  </div>\r\n                  <span>{quiz.description}</span>\r\n                  <h6\r\n                     className=\"card-title pricing-card-title\">\r\n                     {quiz.numberQuestions}\r\n                     <small className=\"text-muted\">\r\n                        / Questions\r\n                     </small>\r\n                     &nbsp;\r\n                  </h6>\r\n                  <br />\r\n                  <Link\r\n                     className={`${quiz.questions.length === 0 || !isStatusOk ? 'disabled-btn' : ''} w-100 btn btn-sm btn-blue`}\r\n                     to={`/quiz/${quizId}`}\r\n                     type=\"button\">\r\n                     Try Quiz\r\n                  </Link>\r\n                  <ErrorMessage\r\n                     message={'Some of the questions are missing answers or there are no questions yet'}\r\n                     show={quiz.questions.length === 0 || !isStatusOk} />\r\n               </div>\r\n            </div>\r\n         </div>\r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\n\r\nfunction mapDispatchToState(dispatch: Function) {\r\n   return {\r\n      removeQuiz: (quizId: string) => dispatch(removeQuizAction(quizId)),\r\n      addQuestion: (info: AddQuestion) => dispatch(addQuestionAction(info))\r\n   }\r\n}\r\n\r\n\r\nexport default connect(null, mapDispatchToState)(QuizCardItem)","C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\According-item\\According.item.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Answer-item\\Answer.item.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Alert-window\\Alert.window.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\toggler\\toggle.reducer.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\toggler\\toggler.actions.types.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\redux\\toggler\\toggler.actions.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Quiz-main\\Quiz.main.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\With-input\\With.input.tsx",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\utils\\confirm.alert.ts",[],"C:\\Users\\nirku\\Desktop\\quiz builder\\my-app\\src\\components\\Add-answer-form\\Add.answer.form.tsx",[],{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","replacedBy":"160"},{"ruleId":"161","severity":1,"message":"162","line":4,"column":10,"nodeType":"163","messageId":"164","endLine":4,"endColumn":23},{"ruleId":"165","severity":1,"message":"166","line":25,"column":8,"nodeType":"167","endLine":25,"endColumn":29,"suggestions":"168"},{"ruleId":"169","severity":1,"message":"170","line":60,"column":29,"nodeType":"171","endLine":60,"endColumn":76},{"ruleId":"161","severity":1,"message":"172","line":1,"column":16,"nodeType":"163","messageId":"164","endLine":1,"endColumn":28},{"ruleId":"157","replacedBy":"173"},{"ruleId":"159","replacedBy":"174"},{"ruleId":"165","severity":1,"message":"175","line":37,"column":7,"nodeType":"167","endLine":37,"endColumn":9,"suggestions":"176"},"no-native-reassign",["177"],"no-negated-in-lhs",["178"],"@typescript-eslint/no-unused-vars","'toggleReducer' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentQuiz'. Either include it or remove the dependency array. If 'currentQuiz' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["179"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'QuizEditMain' is defined but never used.",["177"],["178"],"React Hook useEffect has missing dependencies: 'isStatusOk', 'quiz.numberQuestions', and 'quiz.questions'. Either include them or remove the dependency array.",["180"],"no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},"Update the dependencies array to be: [currentQuiz, match.params.quizId]",{"range":"185","text":"186"},"Update the dependencies array to be: [isStatusOk, quiz.numberQuestions, quiz.questions]",{"range":"187","text":"188"},[974,995],"[currentQuiz, match.params.quizId]",[1135,1137],"[isStatusOk, quiz.numberQuestions, quiz.questions]"]