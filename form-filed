const typesList = [
   'text', 'email', 'password', 'checkbox', 'date'
]

const validatorsList = [
   'required', 'minlength', 'maxlength'
]


interface FormFiled {
   type: string
   label: string,
   validators: string[]
}


function App() {

   const [formFiled, setFormFiled] = useState<FormFiled>({
      type: '',
      label: '',
      validators: []
   })

   const [myForm, setMyForm] = useState<FormFiled[]>([])

   const [goToMyForm, setGoToMyForm] = useState<boolean>(false)


   function handleChange(event: ChangeEvent<HTMLInputElement | HTMLSelectElement>) {
      const { name, value } = event.target
      setFormFiled((prev) => {
         return {
            ...prev,
            [name]: value
         }
      })
   }

   function handleChangeValidators(event: ChangeEvent<HTMLInputElement>) {
      // if (event.target.checked) {
      // console.log(event.target.value, event.target.checked)
      setFormFiled((prev) => {
         return {
            ...prev,
            validators: event.target.checked ?
               [...prev.validators, event.target.value] :
               [...prev.validators.filter((validator) => validator !== event.target.value)]
         }
      })
      // }
   }

   function handleSubmit(event: FormEvent) {
      event.preventDefault()

      setMyForm((prev) => {
         return [
            ...prev,
            formFiled
         ]
      })
      console.log(myForm)



      // setFormFiled({
      //    type: '',
      //    label: '',
      //    validators: []
      // })
   }


   return (
      <div className="App">
         <Header />
         <main>
            <div className="container">
               <form onSubmit={handleSubmit}>
                  <div className="input-ele">
                     <select
                        name="type"
                        className="form-select form-select-sm"
                        aria-label=".form-select-sm example"
                        onChange={handleChange}
                     >
                        <option defaultValue={'Selecet type'}>Selecet type</option>
                        {
                           typesList.map((type: string, index: number) => {
                              return <option key={index} value={type}>{type}</option>
                           })
                        }
                     </select>
                  </div>

                  <div className="form-floating mb-3">
                     <input
                        name="label"
                        type="text"
                        className="form-control from-control-sm"
                        onChange={handleChange}
                     />
                     <label>Label name</label>
                  </div>


                  <span>Validators</span>
                  {
                     validatorsList.map((validator, index) => {
                        return <div key={index}>
                           {validator}
                           <input
                              value={validator}
                              name="validators"
                              onChange={handleChangeValidators}
                              type="checkbox"
                           />
                        </div>
                     })
                  }

                  <button type="submit">Submit</button>
               </form>

               <button onClick={() => setGoToMyForm(!goToMyForm)}>Go to my form</button>

               {
                  goToMyForm ?
                     myForm.map((filed: FormFiled, index: number) => {
                        return <div key={index}>
                           <FormInput  {...filed} />
                        </div>
                     }) : null
               }
            </div>
         </main>
         <Footer />
      </div>
   );
}

export default App;